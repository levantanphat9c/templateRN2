const { execSync } = require('child_process');
const fs = require('fs');

// C·∫•u h√¨nh c√°c lo·∫°i commit
const COMMIT_TYPES = {
  feat: 'üöÄ New Features',
  fix: 'üêõ Bug Fixes',
  docs: 'üìö Documentation',
  style: 'üíÖ Styles',
  refactor: '‚ôªÔ∏è Code Refactoring',
  perf: '‚ö° Performance Improvements',
  test: '‚úÖ Tests',
  build: 'üë∑ Build System',
  ci: 'üîß CI Configuration',
  chore: 'üî® Chores', // C√°c thay ƒë·ªïi kh√°c kh√¥ng modify src ho·∫∑c test
  revert: '‚è™ Reverts',
};

// Ki·ªÉm tra xem m·ªôt chu·ªói c√≥ ph·∫£i l√† commit hash h·ª£p l·ªá kh√¥ng
function isValidCommitHash(hash) {
  try {
    execSync(`git cat-file -t ${hash}`);
    return true;
  } catch {
    return false;
  }
}

// Chuy·ªÉn ƒë·ªïi input th√†nh commit hash
function resolveReference(ref) {
  try {
    // N·∫øu l√† commit hash h·ª£p l·ªá, tr·∫£ v·ªÅ lu√¥n
    if (isValidCommitHash(ref)) {
      return ref;
    }

    // Th·ª≠ resolve tag ho·∫∑c branch name th√†nh commit hash
    const hash = execSync(`git rev-parse ${ref}`).toString().trim();
    if (isValidCommitHash(hash)) {
      return hash;
    }

    throw new Error(`Kh√¥ng th·ªÉ resolve reference: ${ref}`);
  } catch (error) {
    throw new Error(`Reference kh√¥ng h·ª£p l·ªá: ${ref}`);
  }
}

function getReleaseNotes(fromRef, toRef = 'HEAD') {
  try {
    // Chuy·ªÉn ƒë·ªïi references th√†nh commit hashes
    const fromHash = resolveReference(fromRef);
    const toHash = resolveReference(toRef);

    // L·∫•y t·∫•t c·∫£ commits gi·ªØa 2 references
    const gitLogCommand = `git log ${fromHash}..${toHash} --pretty=format:"%s|%h|%an|%ad" --date=short`;
    const commitLog = execSync(gitLogCommand).toString();

    // Ph√¢n lo·∫°i commits
    const categorizedCommits = {};
    Object.values(COMMIT_TYPES).forEach(type => {
      categorizedCommits[type] = [];
    });

    // Th√™m th√¥ng tin v·ªÅ range trong release notes
    const fromDesc = execSync(`git describe --tags --always ${fromHash}`).toString().trim();
    const toDesc = execSync(`git describe --tags --always ${toHash}`).toString().trim();

    commitLog.split('\n').forEach(commit => {
      if (!commit) return;

      const [message, hash, author, date] = commit.split('|');

      // Pattern ƒë·ªÉ match c·∫£ ticket ID v√† commit type
      const typeMatch = message.match(/^(?:([A-Z]+-\d+)\s+)?([a-z]+)(\(.*?\))?:/);

      if (typeMatch) {
        const ticketId = typeMatch[1] || ''; // SSV-123
        const type = typeMatch[2]; // feat, fix, etc.
        const category = COMMIT_TYPES[type] || COMMIT_TYPES.chore;

        // L·∫•y message s·∫°ch
        const cleanMessage = message
          .replace(/^([A-Z]+-\d+\s+)?[a-z]+(\(.*?\))?:\s/, '')
          .replace(/\(#\d+\)$/, '')
          .trim();

        categorizedCommits[category].push({
          ticketId,
          message: cleanMessage,
          hash,
          author,
          date,
        });
      }
    });

    // T·∫°o release notes
    let releaseNotes = `# Release Notes (${new Date().toISOString().split('T')[0]})\n\n`;
    releaseNotes += `## Changes: ${fromDesc} ‚Üí ${toDesc}\n\n`;

    Object.entries(categorizedCommits).forEach(([category, commits]) => {
      if (commits.length > 0) {
        releaseNotes += `## ${category}\n\n`;
        commits.forEach(({ ticketId, message, hash, author, date }) => {
          const ticketReference = ticketId ? `[${ticketId}] ` : '';
          releaseNotes += `- ${ticketReference}${message} \n`; //([${hash}](commit/${hash})) - ${author} - ${date}\n
        });
        releaseNotes += '\n';
      }
    });

    // L∆∞u release notes
    const fileName = `.release_notes/release-notes-${new Date().toISOString().split('T')[0]}.md`;

    var dir = './.release_notes';

    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(fileName, releaseNotes);

    console.log(`‚úÖ Release notes ƒë√£ ƒë∆∞·ª£c t·∫°o trong file ${fileName}`);
    return releaseNotes;
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o release notes:', error.message);
    throw error;
  }
}

// H√†m main ƒë·ªÉ ch·∫°y script
// # S·ª≠ d·ª•ng tags
// node release-notes.js v1.0.0 v1.1.0

// # S·ª≠ d·ª•ng commit hashes
// node release-notes.js abc123def456 efg789hij012

// # K·∫øt h·ª£p tag v√† commit hash
// node release-notes.js v1.0.0 abc123def456

// # S·ª≠ d·ª•ng m·ªôt reference v√† HEAD
// node release-notes.js v1.0.0
// node release-notes.js abc123def456

// # S·ª≠ d·ª•ng branch names
// node release-notes.js main develop
function main() {
  const args = process.argv.slice(2);
  const fromRef = args[0];
  const toRef = args[1] || 'HEAD';

  if (!fromRef) {
    console.error('‚ùå Vui l√≤ng cung c·∫•p reference b·∫Øt ƒë·∫ßu (tag ho·∫∑c commit hash)!');
    console.log('S·ª≠ d·ª•ng: node release-notes.js <fromRef> [toRef]');
    console.log('V√≠ d·ª•:');
    console.log('  node release-notes.js v1.0.0 v1.1.0');
    console.log('  node release-notes.js abc123 def456');
    console.log('  node release-notes.js v1.0.0 HEAD');
    console.log('  node release-notes.js abc123');
    process.exit(1);
  }

  getReleaseNotes(fromRef, toRef);
}

main();
